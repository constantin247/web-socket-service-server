/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InterviewStageService } from "../interviewStage.service";
import { InterviewStageCreateInput } from "./InterviewStageCreateInput";
import { InterviewStage } from "./InterviewStage";
import { InterviewStageFindManyArgs } from "./InterviewStageFindManyArgs";
import { InterviewStageWhereUniqueInput } from "./InterviewStageWhereUniqueInput";
import { InterviewStageUpdateInput } from "./InterviewStageUpdateInput";

export class InterviewStageControllerBase {
  constructor(protected readonly service: InterviewStageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InterviewStage })
  async createInterviewStage(
    @common.Body() data: InterviewStageCreateInput
  ): Promise<InterviewStage> {
    return await this.service.createInterviewStage({
      data: {
        ...data,

        dynamicTemplate: data.dynamicTemplate
          ? {
              connect: data.dynamicTemplate,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        dynamicTemplate: {
          select: {
            id: true,
          },
        },

        dynamicTemplateId: true,
        id: true,
        isQuestionLimited: true,
        isTimeLimited: true,
        numberOfQuestions: true,
        preperationTime: true,
        promptTemplate: true,
        stageNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InterviewStage] })
  @ApiNestedQuery(InterviewStageFindManyArgs)
  async interviewStages(
    @common.Req() request: Request
  ): Promise<InterviewStage[]> {
    const args = plainToClass(InterviewStageFindManyArgs, request.query);
    return this.service.interviewStages({
      ...args,
      select: {
        createdAt: true,

        dynamicTemplate: {
          select: {
            id: true,
          },
        },

        dynamicTemplateId: true,
        id: true,
        isQuestionLimited: true,
        isTimeLimited: true,
        numberOfQuestions: true,
        preperationTime: true,
        promptTemplate: true,
        stageNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InterviewStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interviewStage(
    @common.Param() params: InterviewStageWhereUniqueInput
  ): Promise<InterviewStage | null> {
    const result = await this.service.interviewStage({
      where: params,
      select: {
        createdAt: true,

        dynamicTemplate: {
          select: {
            id: true,
          },
        },

        dynamicTemplateId: true,
        id: true,
        isQuestionLimited: true,
        isTimeLimited: true,
        numberOfQuestions: true,
        preperationTime: true,
        promptTemplate: true,
        stageNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InterviewStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInterviewStage(
    @common.Param() params: InterviewStageWhereUniqueInput,
    @common.Body() data: InterviewStageUpdateInput
  ): Promise<InterviewStage | null> {
    try {
      return await this.service.updateInterviewStage({
        where: params,
        data: {
          ...data,

          dynamicTemplate: data.dynamicTemplate
            ? {
                connect: data.dynamicTemplate,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          dynamicTemplate: {
            select: {
              id: true,
            },
          },

          dynamicTemplateId: true,
          id: true,
          isQuestionLimited: true,
          isTimeLimited: true,
          numberOfQuestions: true,
          preperationTime: true,
          promptTemplate: true,
          stageNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InterviewStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInterviewStage(
    @common.Param() params: InterviewStageWhereUniqueInput
  ): Promise<InterviewStage | null> {
    try {
      return await this.service.deleteInterviewStage({
        where: params,
        select: {
          createdAt: true,

          dynamicTemplate: {
            select: {
              id: true,
            },
          },

          dynamicTemplateId: true,
          id: true,
          isQuestionLimited: true,
          isTimeLimited: true,
          numberOfQuestions: true,
          preperationTime: true,
          promptTemplate: true,
          stageNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
