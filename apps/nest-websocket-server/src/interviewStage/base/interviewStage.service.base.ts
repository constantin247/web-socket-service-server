/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InterviewStage as PrismaInterviewStage,
  DynamicTemplate as PrismaDynamicTemplate,
} from "@prisma/client";

export class InterviewStageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InterviewStageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.interviewStage.count(args);
  }

  async interviewStages(
    args: Prisma.InterviewStageFindManyArgs
  ): Promise<PrismaInterviewStage[]> {
    return this.prisma.interviewStage.findMany(args);
  }
  async interviewStage(
    args: Prisma.InterviewStageFindUniqueArgs
  ): Promise<PrismaInterviewStage | null> {
    return this.prisma.interviewStage.findUnique(args);
  }
  async createInterviewStage(
    args: Prisma.InterviewStageCreateArgs
  ): Promise<PrismaInterviewStage> {
    return this.prisma.interviewStage.create(args);
  }
  async updateInterviewStage(
    args: Prisma.InterviewStageUpdateArgs
  ): Promise<PrismaInterviewStage> {
    return this.prisma.interviewStage.update(args);
  }
  async deleteInterviewStage(
    args: Prisma.InterviewStageDeleteArgs
  ): Promise<PrismaInterviewStage> {
    return this.prisma.interviewStage.delete(args);
  }

  async getDynamicTemplate(
    parentId: string
  ): Promise<PrismaDynamicTemplate | null> {
    return this.prisma.interviewStage
      .findUnique({
        where: { id: parentId },
      })
      .dynamicTemplate();
  }
}
