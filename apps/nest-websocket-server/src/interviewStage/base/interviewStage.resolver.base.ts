/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InterviewStage } from "./InterviewStage";
import { InterviewStageCountArgs } from "./InterviewStageCountArgs";
import { InterviewStageFindManyArgs } from "./InterviewStageFindManyArgs";
import { InterviewStageFindUniqueArgs } from "./InterviewStageFindUniqueArgs";
import { CreateInterviewStageArgs } from "./CreateInterviewStageArgs";
import { UpdateInterviewStageArgs } from "./UpdateInterviewStageArgs";
import { DeleteInterviewStageArgs } from "./DeleteInterviewStageArgs";
import { DynamicTemplate } from "../../dynamicTemplate/base/DynamicTemplate";
import { InterviewStageService } from "../interviewStage.service";
@graphql.Resolver(() => InterviewStage)
export class InterviewStageResolverBase {
  constructor(protected readonly service: InterviewStageService) {}

  async _interviewStagesMeta(
    @graphql.Args() args: InterviewStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InterviewStage])
  async interviewStages(
    @graphql.Args() args: InterviewStageFindManyArgs
  ): Promise<InterviewStage[]> {
    return this.service.interviewStages(args);
  }

  @graphql.Query(() => InterviewStage, { nullable: true })
  async interviewStage(
    @graphql.Args() args: InterviewStageFindUniqueArgs
  ): Promise<InterviewStage | null> {
    const result = await this.service.interviewStage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InterviewStage)
  async createInterviewStage(
    @graphql.Args() args: CreateInterviewStageArgs
  ): Promise<InterviewStage> {
    return await this.service.createInterviewStage({
      ...args,
      data: {
        ...args.data,

        dynamicTemplate: args.data.dynamicTemplate
          ? {
              connect: args.data.dynamicTemplate,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InterviewStage)
  async updateInterviewStage(
    @graphql.Args() args: UpdateInterviewStageArgs
  ): Promise<InterviewStage | null> {
    try {
      return await this.service.updateInterviewStage({
        ...args,
        data: {
          ...args.data,

          dynamicTemplate: args.data.dynamicTemplate
            ? {
                connect: args.data.dynamicTemplate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InterviewStage)
  async deleteInterviewStage(
    @graphql.Args() args: DeleteInterviewStageArgs
  ): Promise<InterviewStage | null> {
    try {
      return await this.service.deleteInterviewStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DynamicTemplate, {
    nullable: true,
    name: "dynamicTemplate",
  })
  async getDynamicTemplate(
    @graphql.Parent() parent: InterviewStage
  ): Promise<DynamicTemplate | null> {
    const result = await this.service.getDynamicTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
