/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DynamicTemplate as PrismaDynamicTemplate,
  InterviewStage as PrismaInterviewStage,
} from "@prisma/client";

export class DynamicTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DynamicTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dynamicTemplate.count(args);
  }

  async dynamicTemplates(
    args: Prisma.DynamicTemplateFindManyArgs
  ): Promise<PrismaDynamicTemplate[]> {
    return this.prisma.dynamicTemplate.findMany(args);
  }
  async dynamicTemplate(
    args: Prisma.DynamicTemplateFindUniqueArgs
  ): Promise<PrismaDynamicTemplate | null> {
    return this.prisma.dynamicTemplate.findUnique(args);
  }
  async createDynamicTemplate(
    args: Prisma.DynamicTemplateCreateArgs
  ): Promise<PrismaDynamicTemplate> {
    return this.prisma.dynamicTemplate.create(args);
  }
  async updateDynamicTemplate(
    args: Prisma.DynamicTemplateUpdateArgs
  ): Promise<PrismaDynamicTemplate> {
    return this.prisma.dynamicTemplate.update(args);
  }
  async deleteDynamicTemplate(
    args: Prisma.DynamicTemplateDeleteArgs
  ): Promise<PrismaDynamicTemplate> {
    return this.prisma.dynamicTemplate.delete(args);
  }

  async findInterviewStages(
    parentId: string,
    args: Prisma.InterviewStageFindManyArgs
  ): Promise<PrismaInterviewStage[]> {
    return this.prisma.dynamicTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .interviewStages(args);
  }
}
