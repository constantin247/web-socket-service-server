/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DynamicTemplate } from "./DynamicTemplate";
import { DynamicTemplateCountArgs } from "./DynamicTemplateCountArgs";
import { DynamicTemplateFindManyArgs } from "./DynamicTemplateFindManyArgs";
import { DynamicTemplateFindUniqueArgs } from "./DynamicTemplateFindUniqueArgs";
import { CreateDynamicTemplateArgs } from "./CreateDynamicTemplateArgs";
import { UpdateDynamicTemplateArgs } from "./UpdateDynamicTemplateArgs";
import { DeleteDynamicTemplateArgs } from "./DeleteDynamicTemplateArgs";
import { InterviewStageFindManyArgs } from "../../interviewStage/base/InterviewStageFindManyArgs";
import { InterviewStage } from "../../interviewStage/base/InterviewStage";
import { DynamicTemplateService } from "../dynamicTemplate.service";
@graphql.Resolver(() => DynamicTemplate)
export class DynamicTemplateResolverBase {
  constructor(protected readonly service: DynamicTemplateService) {}

  async _dynamicTemplatesMeta(
    @graphql.Args() args: DynamicTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DynamicTemplate])
  async dynamicTemplates(
    @graphql.Args() args: DynamicTemplateFindManyArgs
  ): Promise<DynamicTemplate[]> {
    return this.service.dynamicTemplates(args);
  }

  @graphql.Query(() => DynamicTemplate, { nullable: true })
  async dynamicTemplate(
    @graphql.Args() args: DynamicTemplateFindUniqueArgs
  ): Promise<DynamicTemplate | null> {
    const result = await this.service.dynamicTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DynamicTemplate)
  async createDynamicTemplate(
    @graphql.Args() args: CreateDynamicTemplateArgs
  ): Promise<DynamicTemplate> {
    return await this.service.createDynamicTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DynamicTemplate)
  async updateDynamicTemplate(
    @graphql.Args() args: UpdateDynamicTemplateArgs
  ): Promise<DynamicTemplate | null> {
    try {
      return await this.service.updateDynamicTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DynamicTemplate)
  async deleteDynamicTemplate(
    @graphql.Args() args: DeleteDynamicTemplateArgs
  ): Promise<DynamicTemplate | null> {
    try {
      return await this.service.deleteDynamicTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [InterviewStage], { name: "interviewStages" })
  async findInterviewStages(
    @graphql.Parent() parent: DynamicTemplate,
    @graphql.Args() args: InterviewStageFindManyArgs
  ): Promise<InterviewStage[]> {
    const results = await this.service.findInterviewStages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
