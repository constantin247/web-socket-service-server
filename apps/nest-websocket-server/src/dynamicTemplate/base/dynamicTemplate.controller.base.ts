/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DynamicTemplateService } from "../dynamicTemplate.service";
import { DynamicTemplateCreateInput } from "./DynamicTemplateCreateInput";
import { DynamicTemplate } from "./DynamicTemplate";
import { DynamicTemplateFindManyArgs } from "./DynamicTemplateFindManyArgs";
import { DynamicTemplateWhereUniqueInput } from "./DynamicTemplateWhereUniqueInput";
import { DynamicTemplateUpdateInput } from "./DynamicTemplateUpdateInput";
import { InterviewStageFindManyArgs } from "../../interviewStage/base/InterviewStageFindManyArgs";
import { InterviewStage } from "../../interviewStage/base/InterviewStage";
import { InterviewStageWhereUniqueInput } from "../../interviewStage/base/InterviewStageWhereUniqueInput";

export class DynamicTemplateControllerBase {
  constructor(protected readonly service: DynamicTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DynamicTemplate })
  async createDynamicTemplate(
    @common.Body() data: DynamicTemplateCreateInput
  ): Promise<DynamicTemplate> {
    return await this.service.createDynamicTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        prompt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DynamicTemplate] })
  @ApiNestedQuery(DynamicTemplateFindManyArgs)
  async dynamicTemplates(
    @common.Req() request: Request
  ): Promise<DynamicTemplate[]> {
    const args = plainToClass(DynamicTemplateFindManyArgs, request.query);
    return this.service.dynamicTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        prompt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DynamicTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dynamicTemplate(
    @common.Param() params: DynamicTemplateWhereUniqueInput
  ): Promise<DynamicTemplate | null> {
    const result = await this.service.dynamicTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        prompt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DynamicTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDynamicTemplate(
    @common.Param() params: DynamicTemplateWhereUniqueInput,
    @common.Body() data: DynamicTemplateUpdateInput
  ): Promise<DynamicTemplate | null> {
    try {
      return await this.service.updateDynamicTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          prompt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DynamicTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDynamicTemplate(
    @common.Param() params: DynamicTemplateWhereUniqueInput
  ): Promise<DynamicTemplate | null> {
    try {
      return await this.service.deleteDynamicTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          prompt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/interviewStages")
  @ApiNestedQuery(InterviewStageFindManyArgs)
  async findInterviewStages(
    @common.Req() request: Request,
    @common.Param() params: DynamicTemplateWhereUniqueInput
  ): Promise<InterviewStage[]> {
    const query = plainToClass(InterviewStageFindManyArgs, request.query);
    const results = await this.service.findInterviewStages(params.id, {
      ...query,
      select: {
        createdAt: true,

        dynamicTemplate: {
          select: {
            id: true,
          },
        },

        dynamicTemplateId: true,
        id: true,
        isQuestionLimited: true,
        isTimeLimited: true,
        numberOfQuestions: true,
        preperationTime: true,
        promptTemplate: true,
        stageNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interviewStages")
  async connectInterviewStages(
    @common.Param() params: DynamicTemplateWhereUniqueInput,
    @common.Body() body: InterviewStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewStages: {
        connect: body,
      },
    };
    await this.service.updateDynamicTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interviewStages")
  async updateInterviewStages(
    @common.Param() params: DynamicTemplateWhereUniqueInput,
    @common.Body() body: InterviewStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewStages: {
        set: body,
      },
    };
    await this.service.updateDynamicTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interviewStages")
  async disconnectInterviewStages(
    @common.Param() params: DynamicTemplateWhereUniqueInput,
    @common.Body() body: InterviewStageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviewStages: {
        disconnect: body,
      },
    };
    await this.service.updateDynamicTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
